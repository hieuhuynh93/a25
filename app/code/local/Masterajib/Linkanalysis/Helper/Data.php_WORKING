<?php

class Masterajib_Linkanalysis_Helper_Data extends Mage_Core_Helper_Abstract {

    function getKeywordSearchUrl($key) {
        @ini_set('max_execution_time', 180000);
        $str = str_replace(" ", "+", $key);
        $url = 'https://www.google.co.in/search?q=' . $str . "&num=100";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $body = curl_exec($ch);
        curl_close($ch);

        $domdoc = new DOMDocument();
        @$domdoc->loadHTML($body);
        $xml = new DOMXpath($domdoc);
        $res = $xml->query('//h3[@class="r"]//a');
        if ($res) {
            foreach ($res as $k => $link) {
                if (substr(str_replace("/url?q=", "", $link->getAttribute('href')), 0, 4) == 'http') {
                    $html[] = str_replace("/url?q=", "", $link->getAttribute('href'));
                }
            }
        } else {
            $html = 0;
        }
        return $html;
    }

    function search_rank_api($key, $eng, $searchUrl) {
        $parseURL = parse_url($searchUrl);
        $domain = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
        $result = '';
        $isRank = 0;

        $engine = array('google' => 'https://www.google.co.in/search?q=', 'yahoo' => 'https://in.search.yahoo.com/search?p=', 'bing' => 'https://www.bing.com/search?q=');
        $str = str_replace(" ", "+", $key);
        $url = $engine[$eng] . $str . "&num=100";

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $body = curl_exec($ch);
        curl_close($ch);

        $domdoc = new DOMDocument();
        @$domdoc->loadHTML($body);
        $xml = new DOMXpath($domdoc);
        if ($eng == 'google') {
            $res = $xml->query('//h3[@class="r"]//a');
        } elseif ($eng == 'yahoo') {
            $res = $xml->query('//h3[@class="title"]//a');
        } elseif ($eng == 'bing') {
            $res = $xml->query('//h2//a');
        }
        $html = "";
        if ($res) {
            foreach ($res as $k => $link) {
                $html[] = $link->getAttribute('href');
            }
        } else {
            $html = 0;
        }
        $psition = 1;
        foreach ($html as $res) {
            if ($eng == 'google') {
                $parseURL = parse_url(explode("=", $res)[1]);
                $domainNew = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
                if ($domain == $domainNew) {
                    $result = $psition;
                    $isRank = 1;
                    break;
                }
                $psition++;
            } elseif ($eng == 'yahoo') {
                $parseURL = parse_url($res);
                $domainNew = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
                if ($domain == $domainNew) {
                    $result = $psition;
                    $isRank = 1;
                    break;
                }
                $psition++;
            } elseif ($eng == 'bing') {
                $parseURL = parse_url($res);
                $domainNew = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
                if ($domain == $domainNew) {
                    $result = $psition;
                    $isRank = 1;
                    break;
                }
                $psition++;
            }
        }
        return ($isRank == 0 ? 0 : $result);
        //return $result;
    }

    function get_meta_custom($url) {
        //$url = 'https://www.ajio.com';
        $c = curl_init();
        curl_setopt($c, CURLOPT_URL, $url);
        curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($c, CURLOPT_USERAGENT, 'Linux / Firefox 29: Mozilla/5.0 (X11; Linux x86_64; rv:29.0) Gecko/20100101 Firefox/29.0');
        $metaArr = array();
        $contents = curl_exec($c);
        if (isset($contents) && is_string($contents)) {
            $title = null;
            $metaTags = null;

            preg_match('/<title>([^>]*)<\/title>/si', $contents, $match);

            if (isset($match) && is_array($match) && count($match) > 0) {
                $title = strip_tags($match[1]);
            }

            preg_match_all('/<[\s]*meta[\s]*name="?' . '([^>"]*)"?[\s]*' . 'content="?([^>"]*)"?[\s]*[\/]?[\s]*>/si', $contents, $match);

            if (isset($match) && is_array($match) && count($match) == 3) {
                $originals = $match[0];
                $names = $match[1];
                $values = $match[2];

                if (count($originals) == count($names) && count($names) == count($values)) {
                    $metaTags = array();

                    for ($i = 0, $limiti = count($names); $i < $limiti; $i++) {
                        $metaTags[$names[$i]] = array(
                            'html' => htmlentities($originals[$i]),
                            'value' => $values[$i]
                        );
                    }
                }
            }

            $result = array(
                'title' => $title,
                /* 'metaTags' => $metaTags */
                'author' => $metaTags['author']['value'],
                'keywords' => $metaTags['keywords']['value'],
                'description' => $metaTags['description']['value'],
                'viewport' => $metaTags['viewport']['value']
            );
        }
        return $result;
    }

    public function getDocRoot() {
        $docRootArr = explode("/", getcwd());
        $docRoot = '';
        foreach ($docRootArr as $docRootStr) {
            if ($docRootStr == "app") {
                exit();
            } else {
                $docRoot .= $docRootStr . "/";
            }
        }
        return $docRoot;
    }

    function fread_url($url, $ref = "") {
        if (function_exists("curl_init")) {
            $ch = curl_init();
            $user_agent = "Mozilla/4.0 (compatible; MSIE 5.01; " .
                    "Windows NT 5.0)";
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);
            curl_setopt($ch, CURLOPT_HTTPGET, 1);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_REFERER, $ref);
            curl_setopt($ch, CURLOPT_COOKIEJAR, 'cookie.txt');
            $html = curl_exec($ch);
            curl_close($ch);
        } else {
            $hfile = fopen($url, "r");
            if ($hfile) {
                while (!feof($hfile)) {
                    $html .= fgets($hfile, 1024);
                }
            }
        }
        return $html;
    }

    public function getExternalLinks($referenceLink) {
        $externalUrls = array();
        $html = '';
        $c = curl_init();
        curl_setopt($c, CURLOPT_URL, $referenceLink);
        curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($c, CURLOPT_USERAGENT, 'Linux / Firefox 29: Mozilla/5.0 (X11; Linux x86_64; rv:29.0) Gecko/20100101 Firefox/29.0');
        $contents = curl_exec($c);

        $parseURL = parse_url($referenceLink);
        $domain = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';

        $dom = new DomDocument();
        $dom->loadHTML($contents);
        $output = array();
        foreach ($dom->getElementsByTagName('a') as $item) {
            $output[] = array(
                'href' => $item->getAttribute('href'),
                'rel' => $item->getAttribute('rel'),
                'anchorText' => $item->nodeValue
            );
        }

        $filterStrings = array(
            "javascript:void(0);",
            "javascript:;",
            "javscript:void(0)",
            "javascript:void(0)",
            "javscript:void(0);",
            "javascript:void(0)",
            "javascript:void(0)",
            "javascript:history.back();"
        );

        if (!empty($output)) {
            $i = 1;
            foreach ($output as $linksAnchor) {
                if (!in_array($linksAnchor['href'], $filterStrings)) {
                    $newURL = $linksAnchor['href'];
                    $parseURL = parse_url($newURL);
                    $domainNew = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
                    if ($domainNew == '/') {
                        $newURL = $domain . ltrim($newURL, "/");
                    }
                    if ($this->isExternalUrl($newURL, $domain)) {
                        $dofillow = '';
                        $nofollow = '';
                        if ($linksAnchor['rel'] == 'nofollow') {
                            $dofillow = '';
                            $nofollow = '<div class="alert alert-secondary" role="alert">nofollow</div>';
                        } elseif ($linksAnchor['rel'] == 'follow') {
                            $dofillow = '<div class="alert alert-primary" role="alert">follow</div>';
                            $nofollow = '';
                        } else {
                            $dofillow = '<div class="alert alert-warning" role="alert">Not mentioned</div>';
                            $nofollow = '';
                        }
                        $html = '<tr><td style="width:55px;">' . $i . '</td><td style="width:350px;word-wrap: break-word; max-width: 350px;">' . $newURL . '</td><td style="width:120px;">' . $dofillow . '</td><td style="width:100px;">' . $nofollow . '</td></tr>';
                        array_push($externalUrls, $html);
                        $i++;
                    }
                }
            }
        } else {
            $html = '<div class="alert alert-danger" role="alert">Sorry, No External Links Found!</div>';
            array_push($externalUrls, $html);
        }
        array_unique($externalUrls);
        return $externalUrls;
    }

    /* public function getExternalLinks($referenceLink) {
      $externalUrls = array();
      $parseURL = parse_url($referenceLink);
      $domain = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';

      $var = $this->fread_url($referenceLink);
      preg_match_all("/a[\s]+[^>]*?href[\s]?=[\s\"\']+" . "(.*?)[\"\']+.*?>" . "([^<]+|.*?)?<\/a>/", $var, $matches);
      $matches = $matches[1];
      $filterStrings = array(
      "javascript:void(0);",
      "javascript:;",
      "javscript:void(0)",
      "javascript:void(0)",
      "javscript:void(0);",
      "javascript:void(0)",
      "javascript:void(0)",
      "javascript:history.back();"
      );
      foreach ($matches as $newURL) {
      $newURL = ltrim($newURL, "/");
      if (!in_array($newURL, $filterStrings) && $newURL[0] != "#") {
      $parseURL = parse_url($newURL);
      $domainNew = ($parseURL['scheme'] == '' ? '' : $parseURL['scheme'] . '://') . $parseURL['host'] . '/';
      if ($domainNew == '/') {
      $newURL = $domain . ltrim($newURL, "/");
      }
      if ($this->isExternalUrl($newURL, $domain)) {
      array_push($externalUrls, $newURL);
      }
      }
      }

      array_unique($externalUrls);
      return $externalUrls;
      } */

    public function isExternalUrl($newURL, $domain) {
        $domain = rtrim($domain, "/");
        $newURL = rtrim($newURL, "/");
        if (substr($newURL, 0, strlen($domain)) != $domain) {
            return true;
        } else {
            return false;
        }
    }

    public function getGoogleCount($domain) {
        $url = rtrim($domain, "/");
        $url = $url . "/";
        $api_url = "http://www.google.ca/search?q=site%3A" . $url;
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $api_url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HEADER, false);
        $content = curl_exec($curl);
        //$content = _curl($api_url);
        if (empty($content))
            return intval(0);
        if (!strpos($content, 'results'))
            return intval(0);
        $match_expression = '/About (.*?) results/sim';
        preg_match($match_expression, $content, $matches);
        if (empty($matches))
            return intval(0);
        return intval(str_replace(",", "", $matches[1]));
    }

    function getYahooCount($domain) {
        $url = "https://search.yahoo.com/search?p=site:" . $domain;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $output = curl_exec($ch);
        curl_close($ch);
        $results = trim($this->getStringBetween($output, 'Next</a><span>', ' results</span>'));

        $results = str_replace(",", "", $results);

        if ($results == "")
            return 0;
        return $results;
    }

    function getStringBetween($string, $start, $end) {
        $string = " " . $string;
        $ini = strpos($string, $start);
        if ($ini == 0)
            return "";
        $ini += strlen($start);
        $len = strpos($string, $end, $ini) - $ini;
        return substr($string, $ini, $len);
    }

    function getYandexCount($domain) {
        return 5;
    }

    function getBingCount($domain) {
        $url = rtrim($domain, "/");
        $url = $url . "/";
        $url = "http://www.bing.com/search?q=site:" . $url . "&FORM=QBRE&mkt=en-US";
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HEADER, false);
        $html_bing_results = curl_exec($curl);
        curl_close($curl);
        $document = new DOMDocument();
        $document->loadHTML($html_bing_results);
        $selector = new DOMXPath($document);
        $anchors = $selector->query('/html/body//span[@class="sb_count"]');
        foreach ($anchors as $node) {
            $doc = new DOMDocument();
            foreach ($node->childNodes as $child) {
                $doc->appendChild($doc->importNode($child, true));
            }
            $bing_results = $doc->saveHTML();
        }
        $bing_results = str_replace("results", "", $bing_results);
        $bing_results = str_replace(",", "", $bing_results);
        if (trim($bing_results) != "")
            return $bing_results;
        return 0;
    }

    public function getpinterestShareCount($url) {
        $shareCount = 0;
        $url = rtrim($url, "/");
        $url = $url . "/";
        $url = 'https://widgets.pinterest.com/v1/urls/count.json?url=' . $url;
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HEADER, false);
        $data = curl_exec($curl);
        $body = preg_replace('/^receiveCount\((.*)\)$/', '\\1', $data);
        $count = json_decode($body);
        $shareCount = $count->count;
        curl_close($curl);
        return $shareCount;
    }

    public function getFbShareCount($url) {
        $shareCount = 0;
        $api = file_get_contents('http://graph.facebook.com/?id=' . $url);
        $count = json_decode($api);
        foreach ($count as $c) {
            if ($c->share_count > 0) {
                $shareCount = $c->share_count;
                break;
            }
        }

        return $shareCount;
    }

    public function getFileSize($url) {
        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
        $subject = curl_exec($curl);
        $filesize = curl_getinfo($curl, CURLINFO_SIZE_DOWNLOAD);
        return $this->convertFileSize($filesize);
    }

    public function convertFileSize($bytes) {
        if ($bytes >= 1073741824) {
            $bytes = number_format($bytes / 1073741824, 2) . ' GB';
        } elseif ($bytes >= 1048576) {
            $bytes = number_format($bytes / 1048576, 2) . ' MB';
        } elseif ($bytes >= 1024) {
            $bytes = number_format($bytes / 1024, 2) . ' KB';
        } elseif ($bytes > 1) {
            $bytes = $bytes . ' bytes';
        } elseif ($bytes == 1) {
            $bytes = $bytes . ' byte';
        } else {
            $bytes = '0 bytes';
        }

        return $bytes;
    }

    public function isListedInRobotTxt($url, $useragent = false) {
        $parsed = parse_url($url);

        $agents = array(preg_quote('*'));
        if ($useragent)
            $agents[] = preg_quote($useragent);
        $agents = implode('|', $agents);
        $robotstxt = @file(($parsed['scheme'] == '' ? '' : $parsed['scheme'] . '://') . $parsed['host'] . "/robots.txt");
        if (empty($robotstxt))
            return true;
        $rules = array();
        $ruleApplies = false;
        foreach ($robotstxt as $line) {
            if (!$line = trim($line))
                continue;
            if (preg_match('/^\s*User-agent: (.*)/i', $line, $match)) {
                $ruleApplies = preg_match("/($agents)/i", $match[1]);
            }
            if ($ruleApplies && preg_match('/^\s*Disallow:(.*)/i', $line, $regs)) {
                if (!$regs[1])
                    return true;
                $rules[] = preg_quote(trim($regs[1]), '/');
            }
        }

        foreach ($rules as $rule) {
            if (preg_match("/^$rule/", $parsed['path'])) {
                return false;
            } else {
                
            }
        }
        return true;
    }

    public function getPageAuthority($url) {
        $pageAuthority = 0;
        //Getting keys from https://moz.com
        $accessID = "mozscape-53d428ce7e";
        $secretKey = "743ee150639dc53be1ca4c22a2695ebc";
        $expires = time() + 300;
        $stringToSign = $accessID . "\n" . $expires;
        $binarySignature = hash_hmac('sha1', $stringToSign, $secretKey, true);
        $urlSafeSignature = urlencode(base64_encode($binarySignature));
        $objectURL = $url;
        $cols = "103079215140";
        $requestUrl = "http://lsapi.seomoz.com/linkscape/url-metrics/" . urlencode($objectURL) . "?Cols=" . $cols . "&AccessID=" . $accessID . "&Expires=" . $expires . "&Signature=" . $urlSafeSignature;
        $options = array(
            CURLOPT_RETURNTRANSFER => true
        );
        $ch = curl_init($requestUrl);
        curl_setopt_array($ch, $options);
        $content = curl_exec($ch);
        curl_close($ch);
        $json_a = json_decode($content);
        $pageAuthority = round($json_a->upa, 0);
        return $pageAuthority;
    }

    public function getDomainAuthority($url) {
        $domainAuthority = 0;
        //Getting keys from https://moz.com
        $accessID = "mozscape-53d428ce7e";
        $secretKey = "743ee150639dc53be1ca4c22a2695ebc";
        $expires = time() + 300;
        $stringToSign = $accessID . "\n" . $expires;
        $binarySignature = hash_hmac('sha1', $stringToSign, $secretKey, true);
        $urlSafeSignature = urlencode(base64_encode($binarySignature));
        $objectURL = $url;
        $cols = "103079215140";
        $requestUrl = "http://lsapi.seomoz.com/linkscape/url-metrics/" . urlencode($objectURL) . "?Cols=" . $cols . "&AccessID=" . $accessID . "&Expires=" . $expires . "&Signature=" . $urlSafeSignature;
        $options = array(
            CURLOPT_RETURNTRANSFER => true
        );
        $ch = curl_init($requestUrl);
        curl_setopt_array($ch, $options);
        $content = curl_exec($ch);
        curl_close($ch);
        $json_a = json_decode($content);
        $domainAuthority = round($json_a->pda, 0);
        return $domainAuthority;
    }

    public function getPageLoadTime($relatedUrl) {
        $pageLoadTime = '';
        $t = microtime(TRUE);
        ob_start();
        @file_get_contents($relatedUrl);
        ob_end_clean();
        $t = microtime(TRUE) - $t;
        $pageLoadTime = $t;
        return number_format($pageLoadTime, 2) . " sec";
    }

    public function getLinkType($relatedUrl, $primaryUrl) {
        $primaryUrl = rtrim($primaryUrl, "/");
        $linkType = '';
        $primaryUrlLength = strlen($primaryUrl);
        $relatedUrlModified = substr($relatedUrl, 0, $primaryUrlLength);
        if ($primaryUrl == $relatedUrlModified) {
            $linkType = 2;
        } else {
            $linkType = 1;
        }
        return $linkType;
    }

}
